# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
# services:
#   server:
#     build:
#       context: .
#     ports:
#       - 8000:8000

# version: '3.8'

services:
  db:
    image: postgres:17-alpine # Using alpine for a smaller image
    container_name: blog_project-db
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "5432:5432" # Expose for host access (e.g., using a GUI tool)
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist database data
    env_file:
      - .env
    # networks:
    #   - blog_network # Use a custom network for services

  web: # Renamed from django-web for brevity, common in compose
    build: . # Build from the Dockerfile in the current directory
    container_name: blog_project-server # Good for easy identification
    # Command to run Django's development server for local development.
    # This overrides the Dockerfile's CMD (gunicorn) for development.
    command: sh -c "chown -R appuser:appuser /app && python manage.py runserver 0.0.0.0:8000"
    # command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app # Mount your local code into the container for live changes
      # - /app/static # If you're having issues with static files or collectstatic
    ports:
      - "8000:8000" # Expose web app port to host
    environment:
     DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
     DEBUG: ${DEBUG}
     DJANGO_LOGLEVEL: ${DJANGO_LOGLEVEL}
     DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
     DATABASE_ENGINE: ${DATABASE_ENGINE}
     DATABASE_NAME: ${DATABASE_NAME}
     DATABASE_USERNAME: ${DATABASE_USERNAME}
 
     DATABASE_PASSWORD: ${DATABASE_PASSWORD}
     DATABASE_HOST: ${DATABASE_HOST}
     DATABASE_PORT: ${DATABASE_PORT}
    env_file:
      - .env # Load environment variables from .env file
    depends_on:
      - db # Ensure the database starts before the web app
    networks:
      - blog_network # Use the same custom network as the database

volumes:
  postgres_data: # Define the named volume for database persistence

networks:
  blog_network: # Define the custom network for internal communication
    driver: bridge

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

